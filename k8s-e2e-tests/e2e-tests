#!/bin/sh

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ARTIFACTS_PATH=$DIR/results
KUBECONFIG=
SONOBUOY_RUN_ARGS=()
SONOBUOY_IMAGE="gcr.io/heptio-images/sonobuoy"
SONOBUOY_VERSION="latest"
E2E_WAIT_TIME=${E2E_WAIT_TIME:-120} # How long to wait for the test to finish in minutes

USAGE=$(cat <<USAGE
Usage:

  * providing a "kubeconfig"

    -k|--kubeconfig <FILE>   kubeconfig file

Other:
    --e2e-focus              set the e2e tests to focus on
    --e2e-skip               set the e2e tests to skip
    --sonobuoy-image         set the sonobuoy image to be used ('gcr.io/heptio-images/sonobuoy' by default)
    --sonobuoy-version       set the sonobuoy version to be used ('latest' by default)
    --artifacts <DIR>        directory where junit XML files are stored

USAGE
)

# logging and utils

log()        { (>&2 echo ">>> [e2e-tests] $@") ; }
warn()       { log "WARNING: $@" ; }
error()      { log "ERROR: $@" ; exit 1 ; }
abort()      { log "FATAL: $@" ; exit 1 ; }
check_file() { [ -f "$1" ] || abort "File $1 doesn't exist!" ; }

# options

while [[ $# > 0 ]] ; do
  case $1 in
    -k|--kubeconfig)
      KUBECONFIG="$(realpath $2)"
      check_file $KUBECONFIG
      shift
      ;;
    --e2e-focus)
      SONOBUOY_RUN_ARGS+=(--e2e-focus "'$2'")
      shift
      ;;
    --e2e-skip)
      SONOBUOY_RUN_ARGS+=(--e2e-skip "'$2'")
      shift
      ;;
    --sonobuoy-image)
      SONOBUOY_IMAGE="$2"
      shift
      ;;
    --sonobuoy-version)
      SONOBUOY_VERSION="$2"
      shift
      ;;
    --artifacts)
      ARTIFACTS_PATH="$(realpath $2)"
      shift
      ;;
    -h|--help)
      echo "$USAGE"
      exit 0
      ;;
  esac
  shift
done

sonobuoy() {
    # Runs sonobuoy from the given image and version, and:
    #   - Mount the kubeconfig file in `/root/.kube/config` in the container
    #   - Mount the host artifacts path in the artifacts path in the container
    docker run --rm --network=host -v $KUBECONFIG:/root/.kube/config -v $ARTIFACTS_PATH:$ARTIFACTS_PATH -i $SONOBUOY_IMAGE:$SONOBUOY_VERSION ./sonobuoy "$@"
}

run_tests() {
    # We need to specify a specific sonobuoy config file in this branch because
    # the systemd_logs plugin fails to succeed.
    sonobuoy_config=$(mktemp /tmp/sonobuoy-config-XXXXXXXXXX.yaml)
    cat <<EOF > $sonobuoy_config
{
    "plugins": [ { "name": "e2e" } ]
}
EOF
    docker run --rm --network=host -v $sonobuoy_config:/sonobuoy-config.json -v $KUBECONFIG:/root/.kube/config -v $ARTIFACTS_PATH:$ARTIFACTS_PATH -i $SONOBUOY_IMAGE:$SONOBUOY_VERSION ./sonobuoy run --config /sonobuoy-config.json "${SONOBUOY_RUN_ARGS[@]}"
    rm $sonobuoy_config

    # wait a bit to let the test start
    while ! sonobuoy status | grep 'Sonobuoy is still running'
    do
        sleep 20
    done

    # wait until tests will finish
    n=$E2E_WAIT_TIME
    while test $n -gt 0; do
        # Check the status every two minutes
        if ! (($n % 2)) && ! sonobuoy status | grep "Sonobuoy is still running"; then
            break
        fi
        sleep 60
        n=$(($n - 1))
    done

    if sonobuoy status | grep "Sonobuoy has completed"; then
        # Create the artifacts path
        mkdir -p $ARTIFACTS_PATH
        # Copy results from the container
        sonobuoy retrieve $ARTIFACTS_PATH
        # Extract conformance tests tarball results
        tar -xzf ${ARTIFACTS_PATH}/*_sonobuoy_*.tar.gz -C ${ARTIFACTS_PATH}/
    elif sonobuoy status | grep "Sonobuoy is still running"; then
        abort "Kubernetes e2e tests ran out of time"
    else
        abort "Kubernetes e2e tests failed"
    fi
}

# checks

if [ -z "$KUBECONFIG" ]; then
  abort "Option -k|--kubeconfig is required"
fi

# main

run_tests

log "Done."
